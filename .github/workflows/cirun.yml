name: 'OBS Studio CI run'

on:
  push:
    branches: ['*']
  schedule:
    - cron: '19 13 * * *'
  workflow_dispatch:

env:
  CIRUN_REFNAME: ${{ github.ref_name }}

jobs:
  linux_run:
    runs-on: 'ubuntu-22.04'
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout run-script'
        uses: actions/checkout@v3

      - name: 'Setup (0)'
        id: setup0
        env:
          GH_TOKEN: ${{ github.token }}
          patchHash: ${{ hashFiles('patch/**') }}
        run: |
          sha="$(gh api /repos/obsproject/obs-studio/commits | jq '.[0]["sha"]' | tr -d '"' | head -c 9)"
          echo "obsHashAPI=$sha" >> $GITHUB_OUTPUT
          echo "patchHash=$patchHash" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 'Restore obs-studio directory'
        id: obs-studio-cache
        if: github.event_name != 'schedule'
        uses: actions/cache/restore@v3
        with:
          path: obs-studio
          key: obs-studio-${{ runner.os }}-${{ steps.setup0.outputs.obsHashAPI }}-${{ steps.setup0.outputs.patchHash }}

      - name: 'Checkout obs-studio'
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: 'obs-studio'
          submodules: 'recursive'
          fetch-depth: 0
          clean: false

      - name: 'Setup build environment'
        id: setup
        run: |
          echo "obsHash=$(cd obs-studio && git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT

      - name: 'Restore obs-build-dependencies directory'
        id: obs-build-dependencies-cache
        if: github.event_name != 'schedule'
        uses: actions/cache/restore@v3
        with:
          path: obs-build-dependencies
          key: obs-build-dependencies-${{ steps.setup.outputs.obsHash }}
          restore-keys: obs-build-dependencies-

      - name: 'Restore ccache'
        id: ccache-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: cirun-ccache-${{ steps.setup.outputs.obsHash }}
          restore-keys: cirun-ccache-

      - name: 'Configure and build obs-studio'
        run: |
          set -ex
          script/workflow2env.py -w obs-studio/.github/workflows/main.yml -j linux_build -e CEF_BUILD_VERSION_LINUX > build.env
          . build.env
          cd obs-studio
          if test "${{ steps.obs-studio-cache.outputs.cache-hit }}" != 'true'; then
            for p in ../patch/*.patch; do
              patch -p1 < $p
            done
            export RESTORED_CEF=''
            bash -x CI/build-linux.sh
          else
            bash -x CI/linux/01_install_dependencies.sh
          fi

      - name: 'Save ccache'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        with:
          path: ${{ github.workspace }}/.ccache
          key: cirun-ccache-${{ steps.setup.outputs.obsHash }}

      - name: 'Save obs-studio build directory'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        with:
          path: obs-studio
          key: obs-studio-${{ runner.os }}-${{ steps.setup0.outputs.obsHashAPI }}-${{ steps.setup0.outputs.patchHash }}

      - name: 'Restore obs-build-dependencies directory'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-build-dependencies-cache.outputs.cache-hit != 'true' }}
        with:
          path: obs-build-dependencies
          key: obs-build-dependencies-${{ steps.setup.outputs.obsHash }}

      - name: 'Run unit tests'
        run: |
          cd obs-studio
          cmake -DENABLE_UNIT_TESTS=ON build/
          cmake --build build
          cmake --build build -t test

      - name: 'Install obs-studio and test suites'
        run: |
          set -e

          (cd obs-studio && sudo cmake --install build)

          apt_packages=(
            apt-transport-https gnupg
            xvfb
            x11-xserver-utils
            ffmpeg
            nginx libnginx-mod-rtmp
            python3-pip
            python3-pil
            python3-tk python3-dev
            python3-tesserocr
            pulseaudio
            scrot
            xdotool
            lcov
          )
          sudo apt install -y "${apt_packages[@]}"
          pip3 install -U -r cirun/requirements.txt

          curl -L https://notesalexp.org/debian/alexp_key.asc | sudo apt-key add -
          sudo tee -a /etc/apt/sources.list <<<"deb https://notesalexp.org/tesseract-ocr5/jammy/ jammy main"
          sudo apt update
          sudo apt install -y tesseract-ocr tesseract-ocr-eng

          git clone --depth=1 https://github.com/norihiro/untriseptium.git
          (cd untriseptium && pip3 install -U ./)

          sudo tee -a /etc/nginx/nginx.conf <<-EOF
          rtmp_auto_push on;
          rtmp {
            server {
              listen 1935;
              chunk_size 4096;
              timeout 10s;
              application live {
                live on;
                allow publish all;
              }
            }
          }
          EOF

          pulseaudio --start

      - name: 'Create artifact directory'
        env:
          obsHash: ${{ steps.setup.outputs.obsHash }}
        run: |
          artifact=".artifact/$CIRUN_REFNAME/${obsHash}/${RUNNER_OS}/"
          mkdir -p $artifact/{logs,screenshot}
          ln -s $artifact artifact
          ln -s $artifact/screenshot .
          ln -s $artifact/logs .

      - name: 'Cache plugin packages'
        uses: actions/cache@v3
        with:
          path: plugin-cache
          key: plugin-${{ runner.os }}-${{ hashFiles('cirun/*plugin*') }}
          restore-keys: plugin-${{ runner.os }}-

      - name: 'Cache test source files (OS independent)'
        uses: actions/cache@v3
        with:
          path: ffmpeg_gen-cache
          key: ffmpeg_gen-${{ hashFiles('cirun/ffmpeg_gen.py') }}

      - name: 'Run just version and help'
        run: |
          obs --version
          obs --help

      - name: 'Run first time'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          timeout 3m xvfb-run cirun/firsttime.py

      - name: 'Run second time'
        run: |
          sudo nginx &
          mkdir -p screenshot
          timeout 10m xvfb-run cirun/obs-secondtime.py

      - name: 'Run unit tests'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          timeout 30m xvfb-run python3 -m unittest discover -v cirun

      - name: 'Gather coverage data'
        if: always()
        run: |
          set -e
          cd obs-studio
          lcov \
            --exclude '/usr/*' \
            --exclude '*_autogen/*' \
            --exclude '${{ github.workspace }}/obs-build-dependencies/*' \
            --exclude '*/deps/*' \
            --exclude '*/ftl-sdk/*' \
            --exclude '*/decklink-sdk/*' \
            --exclude '*/libnsgif/*' \
            --exclude '*/obs-outputs/librtmp/*' \
            --exclude '*/rnnoise/src/*' \
            -q \
            -c -d . -o ../artifact/lcov.info
          genhtml -q ../artifact/lcov.info -o ../artifact/coverage/

      - name: 'Gather log files'
        if: always()
        run: |
          mv -f $HOME/.config/obs-studio/logs/* logs/
          mkdir -p artifact/recording
          mv $HOME/*.mp4 artifact/recording/ || true
          for i in desktop*.mkv; do
            ffmpeg -loglevel error -i $i -c copy artifact/recording/${i/.mkv/.mp4} || true
          done
          rsync -a --exclude obs-browser $HOME/.config/obs-studio/ artifact/config-obs-studio/

      - name: 'Upload log files'
        if: always()
        env:
          CIRUN_DEPLOY_SSHKEY: ${{ secrets.CIRUN_DEPLOY_SSHKEY }}
          CIRUN_DEPLOY_HOSTKEY: ${{ secrets.CIRUN_DEPLOY_HOSTKEY }}
          CIRUN_DEPLOY_TARGET: ${{ secrets.CIRUN_DEPLOY_TARGET }}
          RUNNER_OS: ${{ runner.os }}
        run: |
          set +x
          mkdir -m 700 -p ~/.ssh
          echo "${CIRUN_DEPLOY_SSHKEY}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${CIRUN_DEPLOY_HOSTKEY}" | base64 -d >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          rsync -a .artifact/* "${CIRUN_DEPLOY_TARGET}/"

      - name: 'Upload results'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-cirun-${{ runner.os }}-${{ steps.setup.outputs.obsHash }}'
          path: |
            .artifact/*

  macos_run:
    runs-on: 'macos-12'
    env:
      BLOCKED_FORMULAS: 'speexdsp curl php composer'
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout run-script'
        uses: actions/checkout@v3

      - name: 'Cache pip'
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 'Setup (0)'
        id: setup0
        env:
          GH_TOKEN: ${{ github.token }}
          patchHash: ${{ hashFiles('patch/**') }}
        run: |
          sha="$(gh api /repos/obsproject/obs-studio/commits | jq '.[0]["sha"]' | tr -d '"' | head -c 9)"
          echo "obsHashAPI=$sha" >> $GITHUB_OUTPUT
          echo "patchHash=$patchHash" >> $GITHUB_OUTPUT

      - name: 'Restore obs-studio directory'
        id: obs-studio-cache
        if: github.event_name != 'schedule'
        uses: actions/cache/restore@v3
        with:
          path: obs-studio
          key: obs-studio-macos-${{ steps.setup0.outputs.obsHashAPI }}-${{ steps.setup0.outputs.patchHash }}
          restore-keys: obs-studio-macos-

      - name: 'Checkout obs-studio'
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: 'obs-studio'
          submodules: 'recursive'
          fetch-depth: 0
          clean: false

      - name: 'Setup build environment'
        id: setup
        run: |
          echo "obsHash=$(cd obs-studio && git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT

      - name: 'Restore ccache from cache'
        id: ccache-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ steps.setup.outputs.obsHash }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: 'Build OBS'
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        run: |
          REMOVE_FORMULAS=""
          for FORMULA in ${{ env.BLOCKED_FORMULAS }}; do
            if [ -d "/usr/local/opt/${FORMULA}" ]; then
              REMOVE_FORMULAS="${REMOVE_FORMULAS} ${FORMULA}"
            fi
          done
          if [ -n "${REMOVE_FORMULAS}" ]; then
            brew uninstall ${REMOVE_FORMULAS}
          fi

          cd obs-studio
          for p in ../patch/*.patch; do
            patch -p1 < $p
          done
          rm -rf build_x86_64/OBS.app
          export -n SEEKING_TESTERS
          export TERM=''
          export -n CI
          export -n GITHUB_RUN_ID
          CI/macos/01_install_dependencies.sh --architecture x86_64
          CI/macos/02_build_obs.sh --architecture x86_64

      - name: 'Save ccache'
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ steps.setup.outputs.obsHash }}

      - name: 'Save obs-studio build directory'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        with:
          path: obs-studio
          key: obs-studio-macos-${{ steps.setup.outputs.obsHash }}-${{ steps.setup0.outputs.patchHash }}

      - name: 'Prepare desktop'
        uses: paulz/prepare-macos@v1

      - name: 'Prepare tools'
        run: |
          brew install tesseract
          pip3 install -U -r cirun/requirements.txt
          pip3 install -U Pillow
          git clone --depth=1 https://github.com/norihiro/untriseptium.git
          (cd untriseptium && pip3 install -U ./)

      - name: 'Create artifact directory'
        env:
          obsHash: ${{ steps.setup.outputs.obsHash }}
        run: |
          artifact=".artifact/$CIRUN_REFNAME/${obsHash}/${RUNNER_OS}/"
          mkdir -p $artifact/{logs,screenshot}
          ln -s $artifact artifact
          ln -s $artifact/screenshot .
          ln -s $artifact/logs .

      - name: 'Cache plugin packages'
        uses: actions/cache@v3
        with:
          path: plugin-cache
          key: plugin-${{ runner.os }}-${{ hashFiles('cirun/*plugin*') }}
          restore-keys: plugin-${{ runner.os }}-

      - name: 'Cache test source files (OS independent)'
        uses: actions/cache@v3
        with:
          path: ffmpeg_gen-cache
          key: ffmpeg_gen-${{ hashFiles('cirun/ffmpeg_gen.py') }}

      - name: 'Run first time'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          python3 cirun/firsttime.py
          ret=$?

          sleep 2
          killall -SIGINT OBS &> /dev/null
          mv -f $HOME/'Library/Application Support/obs-studio/logs/*' logs/
          exit $ret

      - name: 'Run unit tests'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 -m unittest discover -v cirun

      - name: 'Gather coverage data'
        if: always()
        run: |
          set -e
          cd obs-studio
          brew install lcov
          lcov \
            --exclude '/Applications/*' \
            --exclude '/usr/local/*' \
            --exclude '*/.deps/*' \
            --exclude '*_autogen/*' \
            --exclude '*/deps/*' \
            --exclude '*/ftl-sdk/*' \
            --exclude '*/decklink-sdk/*' \
            --exclude '*/libnsgif/*' \
            --exclude '*/obs-outputs/librtmp/*' \
            --exclude '*/rnnoise/src/*' \
            -q \
            -c -d . -o ../artifact/lcov.info
          genhtml -q ../artifact/lcov.info -o ../artifact/coverage/

      - name: 'Gather log files'
        if: always()
        run: |
          mv -f $HOME/'Library/Application Support/obs-studio/logs'/* logs/

      - name: 'Upload log files'
        if: always()
        env:
          CIRUN_DEPLOY_SSHKEY: ${{ secrets.CIRUN_DEPLOY_SSHKEY }}
          CIRUN_DEPLOY_HOSTKEY: ${{ secrets.CIRUN_DEPLOY_HOSTKEY }}
          CIRUN_DEPLOY_TARGET: ${{ secrets.CIRUN_DEPLOY_TARGET }}
          RUNNER_OS: ${{ runner.os }}
        run: |
          set +x
          mkdir -m 700 -p ~/.ssh
          echo "${CIRUN_DEPLOY_SSHKEY}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${CIRUN_DEPLOY_HOSTKEY}" | base64 -d >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          rsync -a .artifact/* "${CIRUN_DEPLOY_TARGET}/"

      - name: Upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-cirun-${{ runner.os }}-${{ steps.setup.outputs.obsHash }}'
          path: |
            .artifact/*

  windows_run:
    runs-on: 'windows-2022'
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout run-script'
        uses: actions/checkout@v3

      - name: 'Setup'
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          sha="$(gh api 'https://api.github.com/repos/obsproject/obs-studio/commits' | jq '.[0]["sha"]' | tr -d '"' | head -c 9)"
          echo "obsHash=$sha" >> $GITHUB_OUTPUT

          gh api "https://api.github.com/repos/obsproject/obs-studio/actions/artifacts?name=obs-studio-windows-x64-$sha" > artifact.json
          gh api "$(jq '.["artifacts"][0]["archive_download_url"]' < artifact.json | tr -d '"')" > a.zip
          7z x a.zip
          7z x -oobs-studio obs-studio-*-windows-x64.zip

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-tesseract-ocr
            mingw-w64-x86_64-tesseract-data-eng

      - name: 'Prepare tools'
        run: |
          which pip3
          pip3 install -U -r cirun/requirements.txt
          pip3 install -U Pillow
          git clone --depth=1 https://github.com/norihiro/untriseptium.git
          (cd untriseptium && pip3 install -U ./)

      - name: 'Create artifact directory'
        env:
          obsHash: ${{ steps.setup.outputs.obsHash }}
        run: |
          artifact=".artifact/$CIRUN_REFNAME/${obsHash}/${RUNNER_OS}/"
          mkdir -p $artifact
          mkdir -p {logs,screenshot}

      - name: 'Cache plugin packages'
        uses: actions/cache@v3
        with:
          path: plugin-cache
          key: plugin-${{ runner.os }}-${{ hashFiles('cirun/*plugin*') }}
          restore-keys: plugin-${{ runner.os }}-

      - name: 'Cache test source files (OS independent)'
        uses: actions/cache@v3
        with:
          path: ffmpeg_gen-cache
          key: ffmpeg_gen-${{ hashFiles('cirun/ffmpeg_gen.py') }}

      - name: 'Run first time'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          which python3
          PATH="$PATH:/d/a/_temp/msys64/mingw64/bin"
          python3 cirun/firsttime.py

      - name: 'Run unit tests'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          which python3
          PATH="$PATH:/d/a/_temp/msys64/mingw64/bin"
          python3 -m unittest discover -v cirun

      - name: 'Upload log files'
        if: always()
        env:
          CIRUN_DEPLOY_SSHKEY: ${{ secrets.CIRUN_DEPLOY_SSHKEY }}
          CIRUN_DEPLOY_HOSTKEY: ${{ secrets.CIRUN_DEPLOY_HOSTKEY }}
          CIRUN_DEPLOY_TARGET: ${{ secrets.CIRUN_DEPLOY_TARGET }}
          obsHash: ${{ steps.setup.outputs.obsHash }}
        run: |
          set +x
          mkdir -p /c/users/runneradmin/.ssh
          echo "${CIRUN_DEPLOY_SSHKEY}" | base64 -d > /c/users/runneradmin/.ssh/id_ed25519
          echo "${CIRUN_DEPLOY_HOSTKEY}" | base64 -d >> /c/users/runneradmin/.ssh/known_hosts
          mv {logs,screenshot} ".artifact/$CIRUN_REFNAME/${obsHash}/${RUNNER_OS}/"
          scp -r .artifact/* "${CIRUN_DEPLOY_TARGET}/" ||
          scp -r .artifact/* "${CIRUN_DEPLOY_TARGET}/"

      - name: Upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-cirun-${{ runner.os }}-${{ steps.setup.outputs.obsHash }}'
          path: |
            .artifact/*
