name: 'OBS Studio CI run'

on:
  push:
    branches: ['*']
  schedule:
    - cron: '19 13 * * *'
  workflow_dispatch:
    inputs:
      tmate-at:
        type: choice
        description: 'Step to call tmate'
        options:
          - none
          - before-first
          - before-unittest
          - before-upload
        required: false
      obs-commit:
        description: 'Build obs-studio using this commit instead of master.'
        type: string
        required: false

env:
  CIRUN_REFNAME: ${{ github.ref_name }}

jobs:
  setup_job:
    runs-on: 'ubuntu-22.04'
    defaults:
      run:
        shell: bash
    outputs:
      obs_hash: ${{ steps.setup.outputs.obs_hash }}
      patch_hash: ${{ steps.setup.outputs.patch_hash }}

    steps:
      - name: 'Checkout run-script'
        uses: actions/checkout@v3

      - name: 'Setup'
        id: setup
        env:
          GH_TOKEN: ${{ github.token }}
          patch_hash: ${{ hashFiles('patch/**') }}
          obs_commit: ${{github.event.inputs.obs-commit}}
        run: |
          q='per_page=1'
          if test -n "$obs_commit"; then
            q="${q}&sha=$obs_commit"
          fi
          obs_hash="$(gh api "/repos/obsproject/obs-studio/commits?$q" | jq '.[0]["sha"]' | tr -d '"' | head -c 9)"
          echo "obs_hash=$obs_hash" >> $GITHUB_OUTPUT
          echo "patch_hash=$patch_hash" >> $GITHUB_OUTPUT

  cirun:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04', 'macos-12', 'windows-2022']
    runs-on: ${{ matrix.os }}
    needs: [setup_job]
    defaults:
      run:
        shell: bash
    env:
      obs_hash: ${{needs.setup_job.outputs.obs_hash}}
      patch_hash: ${{needs.setup_job.outputs.patch_hash}}
      BLOCKED_FORMULAS: 'speexdsp curl php composer'

    steps:
      - name: 'Checkout run-script'
        uses: actions/checkout@v3

      - uses: ./.github/actions/pip-cache

      - name: 'Restore obs-studio directory'
        id: obs-studio-cache
        if: github.event_name != 'schedule'
        uses: actions/cache/restore@v3
        with:
          path: obs-studio
          key: obs-studio-${{ runner.os }}-${{ env.obs_hash }}-${{ env.patch_hash }}

      - name: 'Checkout obs-studio'
        if: ${{ runner.os != 'Windows' && steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: 'obs-studio'
          submodules: 'recursive'
          fetch-depth: 0
          clean: false

      - name: 'Checkout obs-studio ${{env.obs_hash}}'
        if: ${{ runner.os != 'Windows' && steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        run: |
          cd obs-studio
          git checkout $obs_hash
          git submodule update --recursive

      - name: 'Restore ccache'
        id: ccache-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ runner.os }}-${{ env.obs_hash }}
          restore-keys: ccache-${{ runner.os }}-

      - name: 'Configure and build obs-studio'
        if: ${{ runner.os != 'Windows' }}
        uses: ./.github/actions/build-obs
        with:
          use_cache: ${{steps.obs-studio-cache.outputs.cache-hit}}
          obs_hash: ${{ env.obs_hash }}

      - name: 'Download obs-studio'
        if: ${{ runner.os == 'Windows' && steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api "https://api.github.com/repos/obsproject/obs-studio/actions/artifacts?name=obs-studio-windows-x64-$obs_hash" > artifact.json
          gh api "$(jq '.["artifacts"][0]["archive_download_url"]' < artifact.json | tr -d '"')" > a.zip
          7z x a.zip
          7z x -oobs-studio obs-studio-*-windows-x64.zip

      - name: 'Save ccache'
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ runner.os }}-${{ env.obs_hash }}

      - name: 'Save obs-studio directory'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        with:
          path: obs-studio
          key: obs-studio-${{ runner.os }}-${{ env.obs_hash }}-${{ env.patch_hash }}

      - name: 'Run cmocka unit tests'
        if: ${{ runner.os == 'Linux' }}
        run: |
          cd obs-studio
          cmake -DENABLE_UNIT_TESTS=ON build/
          cmake --build build
          cmake --build build -t test

      - name: 'Prepare tools'
        uses: ./.github/actions/setup-tool

      - name: 'Create artifact directory'
        run: |
          artifact=".artifact/$CIRUN_REFNAME/${obs_hash}/${RUNNER_OS}/"
          mkdir -p $artifact
          mkdir -p {logs,screenshot}
          ln -s $artifact artifact
          if test "${{runner.os}}" == 'macOS'; then
            rm -f $HOME/Library/Logs/DiagnosticReports/* || true
          fi

      - name: 'Cache plugin packages'
        uses: actions/cache@v3
        with:
          path: plugin-cache
          key: plugin-${{ runner.os }}-${{ hashFiles('cirun/*plugin*') }}
          restore-keys: plugin-${{ runner.os }}-

      - name: 'Cache test source files (OS independent)'
        uses: actions/cache@v3
        with:
          path: ffmpeg_gen-cache
          key: ffmpeg_gen-${{ hashFiles('cirun/ffmpeg_gen.py') }}

      - name: 'Run just version and help'
        if: ${{ runner.os == 'Linux' }}
        run: |
          obs --version
          obs --help

      - name: 'Extra unit-tests in C'
        if: ${{ runner.os == 'Linux' }}
        run: |
          artifact="$PWD/.artifact/$CIRUN_REFNAME/${obs_hash}/${RUNNER_OS}-test-extras/"
          mkdir -p $artifact
          cd test-extras
          cmake -B build \
            -DOBS_SOURCE_DIR=$(cd ../obs-studio && pwd)
          cd build
          make -j4
          ../../wrapper.sh make test
          lcov --exclude '*/obs-studio-cirun/test-extras/*' -c -d . -o $artifact/lcov.info

      - name: 'tmate (optional)'
        if: ${{ always() && github.event.inputs.tmate-at == 'before-first' }}
        uses: mxschmitt/action-tmate@v3

      - name: 'Run first time'
        run: |
          ./wrapper.sh python3 cirun/firsttime.py

      - name: 'Run second time'
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo nginx &
          mkdir -p screenshot
          ./wrapper.sh python3 cirun/obs-secondtime.py

      - name: 'tmate (optional)'
        if: ${{ always() && github.event.inputs.tmate-at == 'before-unittest' }}
        uses: mxschmitt/action-tmate@v3

      - name: 'Run unit tests'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./wrapper.sh python3 -m unittest discover -v cirun

      - name: 'Gather coverage and log files'
        if: ${{ always() && runner.os != 'Windows' }}
        run: |
          set +e
          cd obs-studio
          lcov \
            --exclude '/usr/*' \
            --exclude '/Applications/*' \
            --exclude '*/.deps/*' \
            --exclude '*_autogen/*' \
            --exclude '${{ github.workspace }}/obs-build-dependencies/*' \
            --exclude '*/deps/*' \
            --exclude '*/ftl-sdk/*' \
            --exclude '*/decklink-sdk/*' \
            --exclude '*/libnsgif/*' \
            --exclude '*/obs-outputs/librtmp/*' \
            --exclude '*/rnnoise/src/*' \
            -q \
            --ignore-errors inconsistent \
            -c -d . -o ../artifact/lcov.info &&
          genhtml -q ../artifact/lcov.info -o ../artifact/coverage/
          cd -

          case "${{runner.os}}" in
            Linux)
              mv -f $HOME/.config/obs-studio/logs/* logs/
              mkdir -p artifact/recording
              mv $HOME/*.mp4 artifact/recording/ || true
              for i in desktop*.mkv; do
                ffmpeg -loglevel error -i $i -c copy artifact/recording/${i/.mkv/.mp4} || true
              done
              rsync -a --exclude obs-browser $HOME/.config/obs-studio/ artifact/config-obs-studio/
              ;;
            macOS)
              mv -f $HOME/'Library/Application Support/obs-studio/logs'/* logs/ || true
              rmdir $HOME/Library/Logs/DiagnosticReports/Retired || true
              mv -f $HOME/Library/Logs/DiagnosticReports/* logs/ || true
              ;;
          esac

      - name: 'tmate (optional)'
        if: ${{ always() && github.event.inputs.tmate-at == 'before-upload' }}
        uses: mxschmitt/action-tmate@v3

      - name: 'Upload log files'
        if: always()
        env:
          CIRUN_DEPLOY_SSHKEY: ${{ secrets.CIRUN_DEPLOY_SSHKEY }}
          CIRUN_DEPLOY_HOSTKEY: ${{ secrets.CIRUN_DEPLOY_HOSTKEY }}
          CIRUN_DEPLOY_TARGET: ${{ secrets.CIRUN_DEPLOY_TARGET }}
          RUNNER_OS: ${{ runner.os }}
        run: |
          artifact=".artifact/$CIRUN_REFNAME/${obs_hash}/${RUNNER_OS}/"
          mkdir -p $artifact
          mv {logs,screenshot} $artifact

          if test "$RUNNER_OS" != Windows; then
            mkdir -m 700 -p ~/.ssh
            echo "${CIRUN_DEPLOY_SSHKEY}" | base64 -d > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            echo "${CIRUN_DEPLOY_HOSTKEY}" | base64 -d >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/known_hosts
            rsync -a .artifact/* "${CIRUN_DEPLOY_TARGET}/" ||
            rsync -a .artifact/* "${CIRUN_DEPLOY_TARGET}/"
          else
            mkdir -p /c/users/runneradmin/.ssh
            echo "${CIRUN_DEPLOY_SSHKEY}" | base64 -d > /c/users/runneradmin/.ssh/id_ed25519
            echo "${CIRUN_DEPLOY_HOSTKEY}" | base64 -d >> /c/users/runneradmin/.ssh/known_hosts
            scp -r .artifact/* "${CIRUN_DEPLOY_TARGET}/" ||
            scp -r .artifact/* "${CIRUN_DEPLOY_TARGET}/"
          fi

      - name: Upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-cirun-${{ runner.os }}-${{ env.obs_hash }}'
          path: |
            .artifact/*
