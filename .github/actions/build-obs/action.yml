name: Build obs-studio

inputs:
  use_cache:
    description: 'Set "true" if obs-studio directory was restored.'
    required: true
  obs_hash:
    description: 'Hash of the obs-studio commit'
    required: true

runs:
  using: composite

  steps:
    - name: 'Restore obs-build-dependencies directory'
      id: obs-build-dependencies-cache
      if: ${{ runner.os == 'Linux' && (github.event_name != 'schedule' || inputs.use_cache == 'true') }}
      uses: actions/cache/restore@v3
      with:
        path: obs-build-dependencies
        key: obs-build-dependencies-${{ runner.os }}-${{ inputs.obs_hash }}
        restore-keys: obs-build-dependencies-${{ runner.os }}-

    - name: 'Apply patches'
      shell: bash
      run: |
        set -ex
        cd obs-studio
        if test "${{ inputs.use_cache }}" != 'true'; then
          for p in ../patch/*.patch; do
            conflict=$(awk '/^Conflict:/{print $2}' $p)
            requires=$(awk '/^Requires:/{print $2}' $p)
            if test -n "$conflict" && git merge-base --is-ancestor "$conflict" HEAD; then
              echo "Info: Skipping $p because of conflicting $conflict"
              continue
            fi
            if test -n "$requires" && ! git merge-base --is-ancestor "$requires" HEAD; then
              echo "Info: Skipping $p because of missing requirement $requires"
              continue
            fi
            patch -p1 < $p
          done
        fi

    - name: 'Configure and build obs-studio'
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        set -ex
        sudo apt update
        sudo apt install -y zsh ccache
        cd obs-studio
        if test "${{ inputs.use_cache }}" != 'true'; then
          export RESTORED_CEF=''
          ccache -z
          .github/scripts/build-linux
          ccache -s
        else
          sudo apt update
          sudo apt install -y cmake ninja-build pkg-config clang clang-format build-essential curl ccache git zsh jq \
          libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libcurl4-openssl-dev libmbedtls-dev libgl1-mesa-dev libjansson-dev libluajit-5.1-dev python3-dev libx11-dev libxcb-randr0-dev libxcb-shm0-dev libxcb-xinerama0-dev libxcb-composite0-dev libxcomposite-dev libxinerama-dev libxcb1-dev libx11-xcb-dev libxcb-xfixes0-dev swig libcmocka-dev libxss-dev libglvnd-dev libgles2-mesa libgles2-mesa-dev libwayland-dev libsrt-openssl-dev libpci-dev \
          qt6-base-dev qt6-base-private-dev libqt6svg6-dev qt6-wayland qt6-image-formats-plugins \
          libasound2-dev libfdk-aac-dev libfontconfig-dev libfreetype6-dev libjack-jackd2-dev libpulse-dev libsndio-dev libspeexdsp-dev libudev-dev libv4l-dev libva-dev libvlc-dev libvpl-dev libdrm-dev nlohmann-json3-dev libwebsocketpp-dev libasio-dev \
          libpipewire-0.3-dev
        fi

    - name: 'Build obs-studio'
      if: ${{ runner.os == 'macOS' && inputs.use_cache != 'true' }}
      uses: ./obs-studio/.github/actions/build-obs
      with:
        workingDirectory: ${{ github.workspace }}/obs-studio/
        target: x86_64
        config: RelWithDebInfo
        codesign: false

    - name: 'Save obs-build-dependencies directory'
      uses: actions/cache/save@v3
      if: ${{ runner.os == 'Linux' && inputs.use_cache != 'true' }}
      with:
        path: obs-build-dependencies
        key: obs-build-dependencies-${{ runner.os }}-${{ inputs.obs_hash }}

